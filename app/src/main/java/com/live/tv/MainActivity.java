package com.live.tv;import android.annotation.TargetApi;import android.content.Intent;import android.os.Bundle;import android.os.SystemClock;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.text.TextUtils;import android.view.View;import android.widget.FrameLayout;import android.widget.RadioButton;import android.widget.RadioGroup;import com.king.base.util.ToastUtils;import com.live.tv.bean.FirstEvent;import com.live.tv.bean.UserBean;import com.live.tv.mvp.activity.ContentActivity;import com.live.tv.mvp.base.PureActivity;import com.live.tv.mvp.fragment.communicate.CommunicateFragment;import com.live.tv.mvp.fragment.home.HomeFragment;import com.live.tv.mvp.fragment.huanxin.runtimepermissions.PermissionsManager;import com.live.tv.mvp.fragment.huanxin.runtimepermissions.PermissionsResultAction;import com.live.tv.mvp.fragment.mine.MineFragment;import com.live.tv.mvp.fragment.shop.ShopFragment;import com.live.tv.util.SpSingleInstance;import com.umeng.message.PushAgent;import com.ysjk.health.iemk.R;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class MainActivity extends PureActivity {    @BindView(R.id.fragmentContent)    FrameLayout fragmentContent;    @BindView(R.id.rbHome)    RadioButton rbHome;    @BindView(R.id.rbSQ)    RadioButton rbSQ;    @BindView(R.id.rbDD)    RadioButton rbDD;    @BindView(R.id.rbWD)    RadioButton rbWD;    @BindView(R.id.rg)    RadioGroup rg;    private HomeFragment homeFragment;    private ShopFragment shopFragment;    private CommunicateFragment communicateFragment;    private MineFragment mineFragment;    private boolean isExit;    private int dj;//记录当前id    private UserBean userBean;    public  static MainActivity newInstance;    private int vid;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        newInstance=this;        ButterKnife.bind(this);        EventBus.getDefault().register(this);        userBean = SpSingleInstance.getSpSingleInstance().getUserBean();        requestPermissions();        PushAgent.getInstance(this).onAppStart();       // startService(new Intent(this, MessListenerSercice.class));    }    @TargetApi(23)    private void requestPermissions() {        PermissionsManager.getInstance().requestAllManifestPermissionsIfNecessary(this, new PermissionsResultAction() {            @Override            public void onGranted() {//				Toast.makeText(MainActivity.this, "All permissions have been granted", Toast.LENGTH_SHORT).show();            }            @Override            public void onDenied(String permission) {                //Toast.makeText(MainActivity.this, "Permission " + permission + " has been denied", Toast.LENGTH_SHORT).show();            }        });    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,                                           @NonNull int[] grantResults) {        PermissionsManager.getInstance().notifyPermissionsChange(permissions, grantResults);    }    @Override    protected void onDestroy() {        super.onDestroy();        newInstance=null;        EventBus.getDefault().unregister(this);    }    @Override    public int getRootViewId() {        return R.layout.activity_main;    }    @Override    public void initUI() {        showHomeFragment();        dj = R.id.rbHome;    }    @Override    protected void onResume() {        super.onResume();        isExit = false;        if (dj == R.id.rbHome) {            showHomeFragment();        } else if (dj == R.id.rbSQ) {            showShopFragment();        } else if (dj == R.id.rbDD) {            showCommunicateFragment();        } else if (dj == R.id.rbWD) {            showMineFragment();        }    }    //首页    public void showHomeFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (homeFragment == null) {            homeFragment = HomeFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, homeFragment);        }        commitShowFragment(fragmentTransaction, homeFragment);    }    //健康商城    public void showShopFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (shopFragment == null) {            shopFragment = ShopFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, shopFragment);        }        commitShowFragment(fragmentTransaction, shopFragment);    }    //健康商城    public void showShopFragment(String data) {         dj = R.id.rbSQ;        rbSQ.setChecked(true);        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (shopFragment == null) {            shopFragment = ShopFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, shopFragment);        }        commitShowFragment(fragmentTransaction, shopFragment);    }    //交流社区    public void showCommunicateFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (communicateFragment == null) {            communicateFragment = CommunicateFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, communicateFragment);        }        commitShowFragment(fragmentTransaction, communicateFragment);    }    //我的    public void showMineFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mineFragment == null) {            mineFragment = MineFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, mineFragment);        }else {            mineFragment.onResume();        }        commitShowFragment(fragmentTransaction, mineFragment);    }    public void hideAllFragment(FragmentTransaction fragmentTransaction) {        hideFragment(fragmentTransaction, homeFragment);        hideFragment(fragmentTransaction, shopFragment);        hideFragment(fragmentTransaction, communicateFragment);        hideFragment(fragmentTransaction, mineFragment);    }    public void commitShowFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        fragmentTransaction.show(fragment);        fragmentTransaction.commit();    }    private void hideFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        if (fragment != null) {            fragmentTransaction.hide(fragment);        }    }    @OnClick({R.id.rbHome, R.id.rbSQ, R.id.rbDD, R.id.rbWD})    public void onViewClicked(View view) {        userBean = SpSingleInstance.getSpSingleInstance().getUserBean();        switch (view.getId()) {            case R.id.rbHome:                dj = R.id.rbHome;                showHomeFragment();                break;            case R.id.rbSQ:                if (userBean==null){                    if (dj==R.id.rbHome){                        rbHome.setChecked(true);                    }else if (dj==R.id.rbSQ){                        rbSQ.setChecked(true);                    }else if (dj==R.id.rbDD){                        rbDD.setChecked(true);                    }else if (dj==R.id.rbWD){                        rbWD.setChecked(true);                    }                    startLogin();                }else {                    if (userBean==null){                        if (dj==R.id.rbHome){                            rbHome.setChecked(true);                        }else if (dj==R.id.rbSQ){                            rbSQ.setChecked(true);                        }else if (dj==R.id.rbDD){                            rbDD.setChecked(true);                        }else if (dj==R.id.rbWD){                            rbWD.setChecked(true);                        }                        startLogin();                    }else {                        dj = R.id.rbSQ;                        showShopFragment();                    }                }                break;            case R.id.rbDD:                dj = R.id.rbDD;                showCommunicateFragment();                break;            case R.id.rbWD:                if (userBean != null && TextUtils.isEmpty(userBean.getMember_id()) && TextUtils.isEmpty(userBean.getMember_token())) {                    if (dj==R.id.rbHome){                        rbHome.setChecked(true);                    }else if (dj==R.id.rbSQ){                        rbSQ.setChecked(true);                    }else if (dj==R.id.rbDD){                        rbDD.setChecked(true);                    }else if (dj==R.id.rbWD){                        rbWD.setChecked(true);                    }                    startLogin();                }else {                    showMineFragment();                    dj=R.id.rbWD;                }                break;        }    }    @Override    public void onBackPressed() {        //由于推送服务会造成toast关闭不掉，所以去掉再按一次退出        if (!isExit) {            ToastUtils.showToast(context.getApplicationContext(), R.string.press_again_to_exit);            isExit = true;            EventBus.getDefault().post(isExit);        } else {            super.onBackPressed();        }    }    @Subscribe(threadMode = ThreadMode.ASYNC)    public void onEventExit(Boolean isBool) {        SystemClock.sleep(1000);        isExit = false;    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onEventMainThread(FirstEvent event) {        if (event.getMsg().equals("logout")) {            dj = R.id.rbHome;            rbHome.setChecked(true);        }    }    private void startLogin() {        Intent intent = new Intent(MainActivity.this, ContentActivity.class);        intent.putExtra(Constants.KEY_FRAGMENT, Constants.LOGIN_FRAGMENT);        intent.putExtra(Constants.STATE, "");        startActivity(intent);    }}